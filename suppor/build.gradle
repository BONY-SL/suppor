plugins {
    id 'java'
    id 'application'
    id 'org.javamodularity.moduleplugin' version '1.8.12'
    id 'org.openjfx.javafxplugin' version '0.0.13'
    id 'org.beryx.jlink' version '2.25.0'
}

group 'org.suppor.p4_group_8_repo.application'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

ext {
    junitVersion = '5.10.0'
    javafxVersion = '17.0.6'
}

sourceCompatibility = '17'
targetCompatibility = '17'

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

application {
    mainModule = 'org.suppor.p4_group_8_repo.application.suppor'
    mainClass = 'org.suppor.p4_group_8_repo.application.suppor.Main'
}

javafx {
    version = '17.0.6'
    modules = ['javafx.controls', 'javafx.fxml', 'javafx.media']
}

dependencies {
    implementation('org.controlsfx:controlsfx:11.1.2')
    implementation('com.dlsc.formsfx:formsfx-core:11.6.0') {
        exclude(group: 'org.openjfx')
    }
    implementation('org.kordamp.bootstrapfx:bootstrapfx-core:0.4.0')
    implementation ('org.junit.jupiter:junit-jupiter-api:5.10.0')
    implementation ('org.junit.jupiter:junit-jupiter-engine')

    // JUnit 5 dependencies for testing
    testImplementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"

    // JavaFX runtime dependencies for testing
    testRuntimeOnly "org.openjfx:javafx-base:${javafxVersion}"
    testRuntimeOnly "org.openjfx:javafx-graphics:${javafxVersion}"
    testRuntimeOnly "org.openjfx:javafx-controls:${javafxVersion}"
    testRuntimeOnly "org.openjfx:javafx-fxml:${javafxVersion}"
}

test {
    useJUnitPlatform()

    jvmArgs += [
            '--module-path', "${sourceSets.main.runtimeClasspath.asPath}:${configurations.testRuntimeClasspath.asPath}",
            '--add-modules', 'org.junit.jupiter.api,org.junit.jupiter.engine',
            '--add-opens', 'java.base/java.lang=ALL-UNNAMED',
            '--add-opens', 'javafx.base/javafx.collections=ALL-UNNAMED',
            '--add-opens', 'javafx.graphics/javafx.scene=ALL-UNNAMED',
            '--add-opens', 'javafx.controls/javafx.scene.control=ALL-UNNAMED',
            '--add-opens', 'javafx.fxml/javafx.fxml=ALL-UNNAMED'
    ]

    testLogging {
        events 'PASSED', 'FAILED', 'SKIPPED'
        exceptionFormat 'full'
    }
}

tasks.register('modularTest', JavaExec) {
    group = 'verification'
    description = 'Run modular tests.'
    classpath = sourceSets.test.runtimeClasspath
    mainClass = 'org.junit.platform.console.ConsoleLauncher'
    args = [
            '--scan-classpath',
            '--details-theme=ascii'
    ]
    jvmArgs += [
            '--module-path', "${sourceSets.main.runtimeClasspath.asPath}:${configurations.testRuntimeClasspath.asPath}",
            '--add-modules', 'org.junit.jupiter.api,org.junit.jupiter.engine',
            '--add-opens', 'java.base/java.lang=ALL-UNNAMED',
            '--add-opens', 'java.base/java.util=ALL-UNNAMED',
            '--add-opens', 'javafx.base/javafx.collections=ALL-UNNAMED',
            '--add-opens', 'javafx.graphics/javafx.scene=ALL-UNNAMED',
            '--add-opens', 'javafx.controls/javafx.scene.control=ALL-UNNAMED',
            '--add-opens', 'javafx.fxml/javafx.fxml=ALL-UNNAMED'
    ]
}

jlink {
    imageZip = project.file("${buildDir}/distributions/app-${javafx.platform.classifier}.zip")
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    launcher {
        name = 'app'
    }

    addExtraDependencies("javafx.controls", "javafx.fxml", "javafx.graphics")
}

jlinkZip {
    group = 'distribution'
}
